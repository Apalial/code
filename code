% % RUNGE KUTTA

% clc;
% f = @(x,y)(-1*y + 2*cos(x));
% h = input("Enter the step size:");
% a = input("Enter the lower limit :");
% b = input("Enter the upper limit :");
% x = a:h:b;
% n = (b-a)/h;
% n = ceil(n);
% y = zeros(1,n);
% y(1) = input("Enter the initial value of y :");
% 
% for i=1:n-1
%     k1 = h * f(x(i), y(i));
%     k2 = h * f(x(i) + h/2, y(i) + k1/2);
%     k3 = h * f(x(i) + h/2, y(i) + k2/2);
%     k4 = h * f(x(i) + h, y(i) + k3);
%     y(i+1) = y(i) + (k1 + 2 * k2 + 2 * k3 + k4)/6;
% end
% fprintf("The solution of points are : ");
% disp(y);


% % COMPOSITE SIMPSON

% clc;
% syms f(x) x;
% f = input("Enter the function :");
% a = input("Lower limit :");
% b = input("Upper limit :");
% n = input("Enter the number of intervals :");
% h = (b-a)/n;
% sum = 0;
% for i = 1 : n-1
%     x = a + i*h;
%     if(rem(i,2) == 0)
%         sum = sum + 2 * f(x);
%     else
%         sum = sum + 4 * f(x);
%     end
% end
% 
% fxn = (f(a) + sum + f(b)) * h/3;
% fprintf("The value of integration is : %f\n",fxn);


% % COMPOSITE TRAPEZOIDAL

% clc;
% syms f(x) x;
% f = input("Enter the function : ");
% a = input("Lower limit :");
% b = input("Upper limit :");
% n = input("No. of iterations :");
% h = (b-a)/n;
% sum = 0;
% 
% for i = 1 : n-1
%     x(i) = a + i * h;
%     sum = sum + 2 * f(x(i));
% end
% 
% fxn = (f(a) + sum + f(b)) * h/2;
% fprintf("The value of integration is : %f\n",fxn);


% % MODIFIED EULER

% clc;
% syms f(x,y) x y;
% f = input("Enter the function :");
% h = input("Step size :");
% a = input("Lower limit :");
% b = input("Upper limit :");
% x = a:h:b;
% n = (b-a)/h;
% n = ceil(n);
% y = zeros(1,n);
% y(1) = input("Enter the initial value of y :");
% 
% for i = 1:n-1
%     k1 = h * f(x(i), y(i));
%     k2 = h * f(x(i) + h, y(i) + k1);
%     y(i+1) = y(i) + (k1 + k2)/2;
% end
% 
% fprintf("Solution at points are :\n");
% disp(y);


% % LAGRANGE INTERPOLATION

% clc;
% x = input("Enter the values :");
% y = input("Enter the value of f(x) corresponding to x :");
% n = length(x);
% p = input("Enter the point where function should be evaluated :");
% 
% for i = 1:n
%     l(i) = 1;
%     for j = 1:n
%         if(i~=j)
%             l(i) = ((p - x(j))/(x(i) - x(j))) * l(i);
%         end
%     end
% end
% 
% sum = 0;
% 
% for i = 1:n
%     sum = sum + l(i) * y(i);
% end
% 
% fprintf("Value of f(x) at %f is %f\n",p,sum);


% % NEWTON DIVIDED DIFFERENCE

clc;
a = input("Enter the values :");
b = input("Enter the values of f(x) corresponding to x :");
n = length(a);
x = input("Enter the value of x where you want to find f(x) :");
f = zeros(n,n);

for i = 1:n
    f(i,1) = b(i);
end

for i = 2:n
    for j = 2:i
        f(i,j) = (f(i,j-1) - f(i-1,j-1)) / (a(i) - a(i-j+1));
    end
end
fxn = f(n,n);
for i = n-1:-1:1
    fxn = fxn * (x - a(i)) + f(i,i);
end

fprintf("Answer is :");
disp(fxn);


% % POWER METHOD

% clc;
% a = input("Enter the matrix :");
% x = input("Enter the initial value :");
% n = input("No. of iterations :");
% tol = input("Tolerance value :");
% k = zeros(n,1);
% 
% for i = 1:n
%     y = a * x;
%     k(i) = norm(y,"inf");
%     x = y/k(i);
%     if(i>1)
%         if(abs(k(i) - k(i-1))<tol)
%             fprintf("Eigen value is : %f\n",k(i));
%             fprintf("corresponding eigen vector is :");
%             disp(x);
%             break;
%         end
%     end
% end


% % GAUSS ELIMINATION

% clc;
% a = input("Enter matrix :");
% b = input("Enter RHS :");
% n = length(a);
% c = [a b];
% disp(c);
% x = zeros(n,1);
% 
% for i = 1:n-1
%     for j = i+1:n
%         m(j,i) = c(j,i)/c(i,i);
%         c(j,:) = c(j,:) - m(j,i) * c(i,:);
%     end
% end
% 
% x(n) = c(n,n+1)/c(n,n);
% 
% for i = n-1:-1:1
%     x(i) = (c(i,n+1) - c(i,i+1:n) * x(i+1:n))/c(i,i);
% end
% disp(x);


% % GAUSS SEIDEL

% clc;
% a = input("Enter matrix :");
% b = input("Enter RHS :");
% x0 = input("Enter initial approximation :");
% N = input("No. of iterations :");
% tol = input("Enter tolerance value :");
% n = length(a);
% x = zeros(n,1);
% 
% for k = 1:N
%     for i = 1:n
%         if(i==1)
%             x(i) = (b(i) - a(i,i+1:n) * x0(i+1:n))/a(i,i);
%         else
%             x(i) = (b(i) - a(i,1:i-1) * x(1:i-1) - a(i,i+1:n) * x0(i+1:n))/a(i,i);
%         end
%         if (norm(x-x0, inf)<tol)
%             break;
%         else
%             x0=x;
%         end
%     end
% end
% 
% fprintf("Solution is : \n");
% disp(x);


% % LU DECOMPOSITION

% clc;
% a = input("Enter matrix :");
% b = input("Enter RHS :");
% n = length(a);
% m = eye(n);
% y = zeros(n,1);
% x = zeros(n,1);
% 
% for i = 1:n-1
%     for j = i+1:n
%         m(j,i) = a(j,i)/a(i,i);
%         a(j,:) = a(j,:) - m(j,i)*a(i,:);
%     end
% end
% 
% L = m;
% U = a;
% y(1) = b(1);
% 
% for i = 2:n
%     y(i) = b(i) - L(i,1:i-1) * y(1:i-1);
% end
% 
% x(n) = y(n)/U(n,n);
% 
% for i = n-1:-1:1
%     x(i) = (y(i) - U(i,i+1:n) * x(i+1:n))/U(i,i);
% end
% 
% fprintf("Solution is : \n");
% disp(x);
